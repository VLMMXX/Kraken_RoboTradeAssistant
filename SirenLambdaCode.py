{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rough-staff",
   "metadata": {},
   "outputs": [],
   "source": [
    "### SIREN ###\n",
    "### Required Libraries ###\n",
    "### PART 1 \n",
    "### NOTHING CHANGED HERE!\n",
    "#------------------------------------------------------------------------\n",
    "from datetime import datetime\n",
    "import json\n",
    "from dateutil.relativedelta import relativedelta\n",
    "from botocore.vendored import requests\n",
    "\n",
    "### Functionality Helper Functions ###\n",
    "def parse_int(n):\n",
    "    \"\"\"\n",
    "    Securely converts a non-integer value to integer.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        return int(n)\n",
    "    except ValueError:\n",
    "        return float(\"nan\")\n",
    "\n",
    "\n",
    "def build_validation_result(is_valid, violated_slot, message_content):\n",
    "    \"\"\"\n",
    "    Define a result message structured as Lex response.\n",
    "    \"\"\"\n",
    "    if message_content is None:\n",
    "        return {\"isValid\": is_valid, \"violatedSlot\": violated_slot}\n",
    "\n",
    "    return {\n",
    "        \"isValid\": is_valid,\n",
    "        \"violatedSlot\": violated_slot,\n",
    "        \"message\": {\"contentType\": \"PlainText\", \"content\": message_content},\n",
    "    }\n",
    "\n",
    "\n",
    "### Dialog Actions Helper Functions ###\n",
    "def get_slots(intent_request):\n",
    "    \"\"\"\n",
    "    Fetch all the slots and their values from the current intent.\n",
    "    \"\"\"\n",
    "    return intent_request[\"currentIntent\"][\"slots\"]\n",
    "\n",
    "\n",
    "def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):\n",
    "    \"\"\"\n",
    "    Defines an elicit slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    return {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\n",
    "            \"type\": \"ElicitSlot\",\n",
    "            \"intentName\": intent_name,\n",
    "            \"slots\": slots,\n",
    "            \"slotToElicit\": slot_to_elicit,\n",
    "            \"message\": message,\n",
    "        },\n",
    "    }\n",
    "\n",
    "\n",
    "def delegate(session_attributes, slots):\n",
    "    \"\"\"\n",
    "    Defines a delegate slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    return {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\"type\": \"Delegate\", \"slots\": slots},\n",
    "    }\n",
    "\n",
    "\n",
    "def close(session_attributes, fulfillment_state, message):\n",
    "    \"\"\"\n",
    "    Defines a close slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    response = {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\n",
    "            \"type\": \"Close\",\n",
    "            \"fulfillmentState\": fulfillment_state,\n",
    "            \"message\": message,\n",
    "        },\n",
    "    }\n",
    "\n",
    "    return response\n",
    "\n",
    "\n",
    "#-------------------------------------------------------------------------------------\n",
    "### PART 2 \n",
    "### RETRIEVING PRICE OF CRYPTO FROM KRAKEN.COM!\n",
    "\n",
    "\n",
    "\"\"\" Retrieves the current price of cryto in US Dollars from the kraken.com API.\"\"\"\n",
    "crypto_usd = 'adaxbt'\n",
    "def price_usd(crypto_usd):\n",
    "    crypto_map = {\n",
    "        'xbtusd': 'XXBTZUSD',\n",
    "        'adausd': 'ADAUSD',\n",
    "        'ethusd': 'XETHZUSD',\n",
    "        'xrpusd': 'XXRPZUSD',\n",
    "        'dotusd': 'DOTUSD',\n",
    "        'filusd': 'FILUSD',\n",
    "        'linkusd': 'LINKUSD',\n",
    "        'ltcusd': 'XLTCZUSD', \n",
    "    }\n",
    "    kraken_url = f'https://api.kraken.com/0/public/Ticker?pair={crypto_map[crypto_usd]}'\n",
    "    response = requests.get(kraken_url)\n",
    "    response_json = response.json()\n",
    "    price = response_json['result'][crypto_map[crypto_usd]]['c'][0]\n",
    "    return price\n",
    "    \n",
    "\"\"\" Retrieves price of crypto bought using Bitcoin from the kraken.com API.\"\"\"\n",
    "crypto_xbt = 'adaxbt'\n",
    "def price_xbt(crypto_xbt):\n",
    "    crypto_xbt_map = {\n",
    "        'adaxbt': 'ADAXBT',\n",
    "        'ethxbt': 'XETHXXBT',\n",
    "        'xrpxbt': 'XXRPXXBT',\n",
    "        'dotxbt': 'DOTXBT',\n",
    "        'filxbt': 'FILXBT',\n",
    "        'linkxbt': 'LINKXBT',\n",
    "        'ltcxbt': 'XLTCXXBT',\n",
    "    }\n",
    "    kraken_url = f'https://api.kraken.com/0/public/Ticker?pair={crypto_xbt}'\n",
    "    response = requests.get(kraken_url)\n",
    "    response_json = response.json()\n",
    "    response_json\n",
    "    price = response_json['result'][crypto_xbt_map[crypto_xbt]]['c'][0]\n",
    "    return price\n",
    "  \n",
    "\"\"\"Retrieves price of crypto bought using Ethereum from the kraken.com API.\"\"\"    \n",
    "crypto_eth = 'adaxbt'\n",
    "def price_eth(crypto_eth):\n",
    "    crypto_eth_map = {\n",
    "        'adaeth': 'ADAETH',\n",
    "        'xrpeth': 'XRPETH',\n",
    "        'doteth': 'DOTETH',\n",
    "        'fileth': 'FILETH',\n",
    "        'linketh': 'LINKETH',\n",
    "        'ltceth': 'LTCETH',\n",
    "    }\n",
    "    kraken_url = f'https://api.kraken.com/0/public/Ticker?pair={crypto_eth}'\n",
    "    response = requests.get(kraken_url)\n",
    "    response_json = response.json()\n",
    "    response_json\n",
    "    price = response_json['result'][crypto_eth_map[crypto_eth]]['c'][0]\n",
    "    return price\n",
    "\n",
    "### RETRIEVING PRICE OF CRYPTO FROM KRAKEN.COM!\n",
    "### FIRST SLOT TYPES - BUTTONS - WHERE THEY SHOULD LEAD?  \n",
    "def coin_category(coin_type):\n",
    "    coin_type = {\n",
    "        \"XRP\": \"You have selected Ripple, current price  \",\n",
    "        \"ETH\": \"You have selected Ethereum, current price  \",\n",
    "        \"DOT\": \"You have selected Polkadot, current price  \",\n",
    "        \"FIL\": \"You have selected Filecoin, current price \",\n",
    "        \"LINK\": \"You have selected Chainlink, current price  \",\n",
    "        \"USDT\": \"You have selected Tether, current price  \",\n",
    "        \"LTC\": \"You have selected Litecoin, current price  \",\n",
    "        \"XBT\": \"You have selected Bitcoin, current price  \",\n",
    "        \"ADA\": \"You have selected Cardano, current price  \",\n",
    "    }    \n",
    "    return coin_type[coin_type.lower()]\n",
    "# price (coin_type)\n",
    "\n",
    "#-------------------------------------------------------------------------------\n",
    "### PART 3 Validating data provided by the user.NOT NESSESARY NOW \"\"\"\n",
    "\n",
    "\n",
    "# def validate_data(buy_coin, quantity_buy, buy_order_type, buy_order_funding, buy_confirmation_total, intent_request):\n",
    "#     # Validate the that number is not negative or <0.\n",
    "#     if quantity_buy is not None:\n",
    "#         quantity_buy  = parse_int(\n",
    "#             quantity_buy \n",
    "#         )  # Since parameters are strings it's important to cast values\n",
    "#         if quantity_buy <= 0:\n",
    "#             return build_validation_result(\n",
    "#                 False,\n",
    "#                 \"quantity_buy\",\n",
    "#                 \" \"\"The minimum amount shold be more than 0, Please, enter amount of coin greater than 0\",\n",
    "#             )\n",
    "    \n",
    "    # Validate the investment amount, it should be >= 5000\n",
    "    # if investment_amount is not None:\n",
    "    #     investment_amount = parse_int(investment_amount)\n",
    "    #     if investment_amount < 5000:\n",
    "    #         return build_validation_result(\n",
    "    #             False,\n",
    "    #             \"investmentAmount\",\n",
    "    #             \"The minimum investment amount is $5,000 USD, \"\n",
    "    #             \"could you please provide a greater amount?\",\n",
    "    #         )\n",
    "    # return build_validation_result(True, None, None)\n",
    "\n",
    "\n",
    "### PART 3 Intents Handlers ###\n",
    "\n",
    "def Buy_Order(intent_request):\n",
    "    \"\"\"\n",
    "    Performs dialog management and fulfillment for buying order.\n",
    "    \"\"\"\n",
    "    buy_coin = get_slots(intent_request)[\"BuyCoin\"]\n",
    "    quantity_buy = get_slots(intent_request)[\"QuantityBuy\"]\n",
    "    buy_order_type = get_slots(intent_request)[\"BuyOrderType\"]\n",
    "    buy_order_funding = get_slots(intent_request)[\"BuyOrderFunding\"]\n",
    "    # if source == \"DialogCodeHook\":\n",
    "        # Perform basic validation on the supplied input slots.\n",
    "        # Use the elicitSlot dialog action to re-prompt\n",
    "        # for the first violation detected.\n",
    "        # slots = get_slots(intent_request)\n",
    "        # validation_result = validate_data(buy_coin, quantity_buy, buy_order_type, buy_order_funding, buy_confirmation_total, intent_request)\n",
    "        # if not validation_result[\"isValid\"]:\n",
    "            # slots[validation_result[\"violatedSlot\"]] = None  # Cleans invalid slot\n",
    "            # Returns an elicitSlot dialog to request new data for the invalid slot\n",
    "            # return elicit_slot(\n",
    "            #     intent_request[\"sessionAttributes\"],\n",
    "            #     intent_request[\"currentIntent\"][\"name\"],\n",
    "            #     slots,\n",
    "            #     validation_result[\"violatedSlot\"],\n",
    "            #     validation_result[\"message\"],\n",
    "            # )\n",
    "        # Fetch current session attibutes\n",
    "        # output_session_attributes = intent_request[\"sessionAttributes\"]\n",
    "        # return delegate(output_session_attributes, get_slots(intent_request))\n",
    "    order_price = 0\n",
    "    if buy_order_funding == \"ETH\":\n",
    "        pair = (buy_coin + buy_order_funding).lower()\n",
    "        order_price = price_eth(pair)\n",
    "        total_cost = round(float(quantity_buy) * float(order_price) * 1.0026,8)\n",
    "    elif buy_order_funding == \"XBT\":\n",
    "        pair = (buy_coin + buy_order_funding).lower()\n",
    "        order_price = price_xbt(pair)\n",
    "        total_cost = round(float(quantity_buy) * float(order_price) * 1.0026,8)\n",
    "    else:\n",
    "        pair = (buy_coin + buy_order_funding).lower()\n",
    "        order_price = price_usd(pair)\n",
    "        total_cost = round(float(quantity_buy) * float(order_price) * 1.0026,2)\n",
    "    return close(\n",
    "        intent_request[\"sessionAttributes\"],\n",
    "        \"Fulfilled\",\n",
    "        {\n",
    "            \"contentType\": \"PlainText\",\n",
    "            \"content\": \"\"\"Great news, your buy order has been filled for {} {} for a total amount {} {}!\n",
    "            \"\"\".format(\n",
    "                 quantity_buy, buy_coin, buy_order_funding, total_cost\n",
    "            ),\n",
    "        },\n",
    "    )\n",
    "    \n",
    "    \"\"\" Performs dialog management and fulfillment for sell order. \"\"\"\n",
    "    \n",
    "def Sell_Order(intent_request):\n",
    "    sell_coin = get_slots(intent_request)[\"SellCoin\"]\n",
    "    quantity_sell = get_slots(intent_request)[\"QuantitySell\"]\n",
    "    sell_order_type = get_slots(intent_request)[\"SellOrderType\"]\n",
    "    sell_funding_type = get_slots(intent_request)[\"SellFundingType\"]\n",
    "    # if source == \"DialogCodeHook\":\n",
    "        # Perform basic validation on the supplied input slots.\n",
    "        # Use the elicitSlot dialog action to re-prompt\n",
    "        # for the first violation detected.\n",
    "        # slots = get_slots(intent_request)\n",
    "        # validation_result = validate_data(buy_coin, quantity_buy, buy_order_type, buy_order_funding, buy_confirmation_total, intent_request)\n",
    "        # if not validation_result[\"isValid\"]:\n",
    "            # slots[validation_result[\"violatedSlot\"]] = None  # Cleans invalid slot\n",
    "            # Returns an elicitSlot dialog to request new data for the invalid slot\n",
    "            # return elicit_slot(\n",
    "            #     intent_request[\"sessionAttributes\"],\n",
    "            #     intent_request[\"currentIntent\"][\"name\"],\n",
    "            #     slots,\n",
    "            #     validation_result[\"violatedSlot\"],\n",
    "            #     validation_result[\"message\"],\n",
    "            # )\n",
    "        # Fetch current session attibutes\n",
    "        # output_session_attributes = intent_request[\"sessionAttributes\"]\n",
    "        # return delegate(output_session_attributes, get_slots(intent_request))\n",
    "    order_price = 0\n",
    "    if sell_funding_type == \"ETH\":\n",
    "        pair = (sell_coin + sell_funding_type).lower()\n",
    "        order_price = price_eth(pair)\n",
    "        total_cost = round(float(quantity_sell) * float(order_price) * 1.0026,8)\n",
    "    elif sell_funding_type == \"XBT\":\n",
    "        pair = (sell_coin + sell_funding_type).lower()\n",
    "        order_price = price_xbt(pair)\n",
    "        total_cost = round(float(quantity_sell) * float(order_price) * 1.0026,8)\n",
    "    else:\n",
    "        pair = (sell_coin + sell_funding_type).lower()\n",
    "        order_price = price_usd(pair)\n",
    "        total_cost = round(float(quantity_sell) * float(order_price) * 1.0026,2)\n",
    "    return close(\n",
    "        intent_request[\"sessionAttributes\"],\n",
    "        \"Fulfilled\",\n",
    "        {\n",
    "            \"contentType\": \"PlainText\",\n",
    "            \"content\": \"\"\"Great news, your sell order has been filled for {} {} for a total amount {} {}!\n",
    "            \"\"\".format(\n",
    "                 quantity_sell, sell_coin, sell_funding_type, total_cost\n",
    "            ),\n",
    "        },\n",
    "    )\n",
    "    \n",
    "def Fetch_Price(intent_request):\n",
    "    fetch_map = {\n",
    "        'ETH': 'ethusd',\n",
    "        'ADA': 'adausd',\n",
    "        'XBT': 'xbtusd',\n",
    "        'XRP': 'xrpusd',\n",
    "        'DOT': 'dotusd',\n",
    "        'FIL': 'filusd',\n",
    "        'LINK': 'linkusd',\n",
    "        'LTC': 'ltcusd', \n",
    "    }\n",
    "    fetch_input = get_slots(intent_request)[\"CoinFetch\"]\n",
    "    current_price = price_usd(fetch_map[fetch_input])\n",
    "    return close(\n",
    "        intent_request[\"sessionAttributes\"],\n",
    "        \"Fulfilled\",\n",
    "        {\n",
    "            \"contentType\": \"PlainText\",\n",
    "            \"content\": \"\"\"The current market price of {} is {}.\n",
    "            \"\"\".format(fetch_input, current_price\n",
    "                 \n",
    "            ), \n",
    "        },\n",
    "    )\n",
    "    \n",
    "def Stake(intent_request):\n",
    "    stake_coin = get_slots(intent_request)[\"StakeCoin\"]\n",
    "    stake_amount = get_slots(intent_request)[\"StakeAmount\"]\n",
    "    return close(\n",
    "        intent_request[\"sessionAttributes\"],\n",
    "        \"Fulfilled\",\n",
    "        {\n",
    "            \"contentType\": \"PlainText\",\n",
    "            \"content\": \"\"\"Congratulations, you have successfully staked {} {} at 12%, payed out twice weekly!\n",
    "            \"\"\".format(\n",
    "                 stake_amount, stake_coin\n",
    "            ),\n",
    "        },\n",
    "    )    \n",
    "    \n",
    "    \n",
    "### Intents Dispatcher ###\n",
    "def dispatch(intent_request):\n",
    "    \"\"\"\n",
    "    Called when the user specifies an intent for this bot.\n",
    "    \"\"\"\n",
    "\n",
    "    intent_name = intent_request[\"currentIntent\"][\"name\"]\n",
    "\n",
    "    # Dispatch to bot's intent handlers\n",
    "    if intent_name == \"BuyOrder\":\n",
    "        return Buy_Order(intent_request)\n",
    "    if intent_name == \"SellOrder\":\n",
    "        return Sell_Order(intent_request)\n",
    "    if intent_name == \"FetchPrice\":\n",
    "        return Fetch_Price(intent_request)\n",
    "    if intent_name == \"Stake\":\n",
    "        return Stake(intent_request)\n",
    "\n",
    "    raise Exception(\"Intent with name \" + intent_name + \" not supported\")\n",
    "\n",
    "\n",
    "### Main Handler ###\n",
    "def lambda_handler(event, context):\n",
    "    \"\"\"\n",
    "    Route the incoming request based on intent.\n",
    "    The JSON body of the request is provided in the event slot.\n",
    "    \"\"\"\n",
    "\n",
    "    return dispatch(event)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
